#!/usr/bin/env bash
#
# LuxeOS (c) 2023 by Jozef Nagy
#
# LuxeOS is licensed under a
# Creative Commons Attribution-NoDerivatives 4.0 International License.
#
# You should have received a copy of the license along with this
# work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>.
#
#

function make_write {
	printf "%s\n" "$@" >> Makefile
}

## TODO: Check if the required programs for building are present
## TODO: Allow to configure custom build and release directories

# Download submodules
git submodule update --init 1> /dev/null
make -C ex/limine

if [ ! -f ".config" ]; then
	ex/kconfiglib/alldefconfig.py
fi

if [ ! -f "krnl/config.h" ]; then
	ex/kconfiglib/genconfig.py --header-path krnl/config.h
fi

build_dir="build"
release_dir="release"

x86_64_cflags="-Wall -Wextra -std=c99 -ffreestanding -fno-stack-protector -fno-stack-check -fno-lto -fPIE -m64 -march=x86-64 -mno-80387 -mno-mmx -mno-sse -mno-sse2 -mno-red-zone"
x86_64_ldflags="-melf_x86_64 -nostdlib -static -pie --no-dynamic-linker -ztext -zmax-page-size=0x1000 -T aux/linker-\$(CONFIG_ARCH).ld"
x86_64_asflags="-felf64"

x86_64_ovmf="aux/ovmf-x86_64.fd"

cppflags="-MMD -MP"
qemu_flags="-m 1G -serial stdio -no-reboot -no-shutdown -cdrom \$(RELEASE_ISO) \$(BIOS)"

echo -e "# This file has been generated by ./configure. Do not change this file." > Makefile
make_write "#"
make_write "#"
make_write "# LuxeOS (c) 2023 by Jozef Nagy"
make_write "#"
make_write "# LuxeOS is licensed under a"
make_write "# Creative Commons Attribution-NoDerivatives 4.0 International License."
make_write "#"
make_write "# You should have received a copy of the license along with this"
make_write "# work. If not, see <http://creativecommons.org/licenses/by-nd/4.0/>."
make_write "#"
make_write "#"
make_write ""
make_write "include .config"
make_write ""
make_write "GIT_REVISION := \$(shell git rev-parse --short HEAD)"
make_write ""
make_write "BUILD_DIR := $build_dir"
make_write "KERNEL := \$(BUILD_DIR)/krnl.sys"
make_write ""
make_write "RELEASE_DIR := $release_dir"
make_write "RELEASE_ISO := \$(RELEASE_DIR)/luxe-cd-\$(GIT_REVISION)_\$(CONFIG_ARCH).iso"
make_write "RELEASE_HDD := \$(RELEASE_DIR)/luxe-hdd-\$(GIT_REVISION)_\$(CONFIG_ARCH).img"
make_write ""
make_write "INCDIR := krnl krnl/corelib"
make_write ""
make_write "ifeq (\$(CONFIG_ARCH),\"x86_64\")"
make_write "	PREFIX := x86_64-elf"
make_write "	AS := nasm"
make_write "	ARCH_C_FILES := \$(shell find krnl/arch/\$(CONFIG_ARCH) -name "*.c" -type f)"
make_write "	ARCH_AS_FILES := \$(shell find krnl/arch/\$(CONFIG_ARCH) -name "*.asm" -type f)"
make_write "	ASFLAGS := $x86_64_asflags"
make_write "	CFLAGS := $x86_64_cflags"
make_write "	CPPFLAGS :=	\$(INCDIR:%=-I%) $cppflags"
make_write "	LDFLAGS := $x86_64_ldflags"
make_write "endif"
make_write ""
make_write "ifeq (\$(CONFIG_BIOS),uefi)"
make_write "	BIOS := -bios $x86_64_ovmf"
make_write "else"
make_write "	BIOS :="
make_write "endif"
make_write ""
make_write "ifeq (\$(CONFIG_DEBUG),y)"
make_write "	CFLAGS += -g"
make_write "	ASFLAGS += -g"
make_write "	LDFLAGS += -g"
make_write "endif"
make_write ""
make_write "CC := \$(PREFIX)-gcc"
make_write "LD := \$(PREFIX)-ld"
make_write "OBJCOPY := \$(PREFIX)-objcopy"
make_write "QEMU := qemu-system-\$(CONFIG_ARCH)"
make_write ""
make_write "QEMUFLAGS := $qemu_flags"
make_write "C_FILES := \$(shell find krnl -name "*.c" -not -path "*/arch/*" -type f)"
make_write "AS_FILES := \$(shell find krnl -name "*.asm" -not -path "*/arch/*" -type f)"
make_write ""
make_write "OBJ := \$(C_FILES:%.c=\$(BUILD_DIR)/%.o) \$(ARCH_C_FILES:%.c=\$(BUILD_DIR)/%.o) \$(AS_FILES:%.asm=\$(BUILD_DIR)/%.o) \$(ARCH_AS_FILES:%.asm=\$(BUILD_DIR)/%.o)"
make_write ""
make_write ".PHONY: all"
make_write "all: release_iso # release_hdd"
make_write ""
make_write ".PHONY: release_iso"
make_write "release_iso: \$(KERNEL)"
make_write "	@printf \" GEN  \$(basename RELEASE_ISO)\\n\""
make_write "	@mkdir -p \$(RELEASE_DIR)"
make_write "	@mkdir -p iso_tmp/EFI/BOOT"
make_write "	@cp \$(KERNEL) aux/limine.cfg ex/limine/limine-bios.sys ex/limine/limine-bios-cd.bin ex/limine/limine-uefi-cd.bin iso_tmp/"
make_write "	@cp ex/limine/BOOTX64.EFI iso_tmp/EFI/BOOT/"
make_write "	@xorriso -as mkisofs -b limine-bios-cd.bin -no-emul-boot -boot-load-size 4 -boot-info-table --efi-boot limine-uefi-cd.bin -efi-boot-part --efi-boot-image --protective-msdos-label iso_tmp -o \$(RELEASE_ISO) &>/dev/null"
make_write "	@ex/limine/limine bios-install \$(RELEASE_ISO) &>/dev/null"
make_write "	@rm -rf iso_tmp"
make_write ""
make_write "# This will probably move to a shell script to enable macOS users to"
make_write "# generate .img files as well"
make_write "# NOTE: This has not been tested, use at your own "
make_write ".PHONY: release_hdd"
make_write "release_hdd: \$(KERNEL)"
make_write "	@printf \" GEN  \$(basename RELEASE_HDD)\\n\""
make_write "	@mkdir -p \$(RELEASE_DIR)"
make_write "	@dd if=/dev/zero bs=1M count=0 seek=64 of=\$(RELEASE_HDD)"
make_write "	@parted -s \$(RELEASE_HDD) mklabel gpt"
make_write "	@parted -s \$(RELEASE_HDD) mkpart ESP fat32 2048s 100%"
make_write "	@parted -s \$(RELEASE_HDD) set 1 esp on"
make_write "	@ex/limine/limine bios-install \$(RELEASE_HDD) &>/dev/null"
make_write "	LOOPBACK := \$(shell sudo losetup -Pf --show \$(RELEASE_HDD))"
make_write "	@sudo mkfs.fat32 \$(LOOPBACK)p1"
make_write "	@mkdir -p hdd_tmp"
make_write "	@sudo mount \$(LOOPBACK)p1 hdd_tmp"
make_write "	@sudo mkdir -p hdd_tmp/EFI/BOOT"
make_write "	@sudo cp \$(KERNEL) aux/limine.cfg ex/limine/limine-bios.sys hdd_tmp"
make_write "	@sudo cp ex/limine/BOOTX64.EFI hdd_tmp/EFI/BOOT/"
make_write "	@sync"
make_write "	@sudo umount hdd_tmp"
make_write "	@sudo losetup -d \$(LOOPBACK)"
make_write "	@sudo rm -rf hdd_tmp"
make_write ""
make_write ".PHONY: run"
make_write "run: release_iso"
make_write "	@\$(QEMU) \$(QEMUFLAGS)"
make_write ""
make_write ".config:"
make_write "	@ex/kconfiglib/alldefconfig.py"
make_write ""
make_write "krnl/config.h: Kconfig .config"
make_write "	@ex/kconfiglib/genconfig.py --header-path krnl/config.h"
make_write ""
make_write ".PHONY: menuconfig"
make_write "menuconfig:"
make_write "	@ex/kconfiglib/menuconfig.py"
make_write ""
make_write ".PHONY: guiconfig"
make_write "guiconfig:"
make_write "	@ex/kconfiglib/guiconfig.py"
make_write ""
make_write "\$(BUILD_DIR)/%.o: %.c"
make_write "	@mkdir -p \$(dir \$@)"
make_write "	@printf \" CC   \$^\\n\""
make_write "	@\$(CC) \$(CFLAGS) \$(CPPFLAGS) -c $< -o \$@"
make_write ""
make_write "\$(BUILD_DIR)/%.o: %.asm"
make_write "	@mkdir -p \$(dir \$@)"
make_write "	@printf \" AS   \$^\\n\""
make_write "	@\$(AS) \$(ASFLAGS) $< -o \$@"
make_write ""
make_write "\$(KERNEL): \$(OBJ)"
make_write "	@mkdir -p \$(dir \$@)"
make_write "	@printf \" LD   \$@\\n\""
make_write "	@\$(LD) \$(OBJ) \$(LDFLAGS) -o \$@"
make_write ""
make_write ".PHONY: clean"
make_write "clean:"
make_write "	@printf \" CLEAN\\n\""
make_write "	@rm -rf \$(BUILD_DIR)"
make_write "	@rm -rf \$(RELEASE_DIR)"
make_write ""
make_write "distclean: clean"
make_write "	@printf \" DISTCLEAN\\n\""
make_write "	@rm -rf Makefile .config ex/*"